name: Customer Portal CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Test Server
  test-server:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --quiet --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Install server dependencies
      run: |
        cd server
        npm ci

    - name: Create test environment file
      run: |
        cd server
        echo "PORT=5001" > .env.test
        echo "MONGO_URI=mongodb://localhost:27017/customer-portal-test" >> .env.test
        echo "JWT_SECRET=test-jwt-secret-key" >> .env.test
        echo "SESSION_SECRET=test-session-secret-key" >> .env.test
        echo "NODE_ENV=test" >> .env.test

    - name: Run server tests
      run: |
        cd server
        npm test
      env:
        NODE_ENV: test

    - name: Run security audit
      run: |
        cd server
        npm audit --audit-level=moderate

  # Test Client
  test-client:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install client dependencies
      run: |
        cd client
        npm ci

    - name: Run client tests
      run: |
        cd client
        npm test -- --coverage --passWithNoTests
      env:
        CI: true

    - name: Build client
      run: |
        cd client
        npm run build

    - name: Run client security audit
      run: |
        cd client
        npm audit --audit-level=moderate

  # Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd server
        npm ci

    - name: Run ESLint
      run: |
        cd server
        npx eslint . || exit 0

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
